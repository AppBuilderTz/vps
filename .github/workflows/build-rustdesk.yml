name: Build RustDesk 0.0.9

on:
  workflow_dispatch:
    inputs:
      build_version:
        description: 'Version to build (default: 0.0.9)'
        required: false
        default: '0.0.9'

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        include:
          - os: ubuntu-latest
            artifact_name: rustdesk-linux
            asset_name: rustdesk-linux
          - os: windows-latest
            artifact_name: rustdesk-windows
            asset_name: rustdesk-windows.exe
          - os: macos-latest
            artifact_name: rustdesk-macos
            asset_name: rustdesk-macos

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
        ref: ${{ github.event.inputs.build_version || 'v0.0.9' }}

    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
        components: rustfmt, clippy

    - name: Install dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libgtk-3-dev \
          libappindicator3-dev \
          libayatana-appindicator3-dev \
          libssl-dev \
          libxcb-randr0-dev \
          libxdo-dev \
          libxfixes-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libasound2-dev \
          patchelf \
          librsvg2-dev \
          libudev-dev

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install librsvg

    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --release

    - name: Run tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --release

    - name: Package Linux AppImage
      if: matrix.os == 'ubuntu-latest'
      run: |
        # 这里添加打包 AppImage 的脚本
        # 例如使用 appimage-builder 或自定义脚本

    - name: Upload artifacts
      uses: actions/upload-artifact@v4  # 更新到最新版本
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          target/release/rustdesk
          target/release/rustdesk.exe
          target/release/resources
          target/release/*.dylib
          target/release/*.so

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'created'
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4  # 也更新下载工件的操作
      
    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          rustdesk-linux/target/release/rustdesk
          rustdesk-windows/target/release/rustdesk.exe
          rustdesk-macos/target/release/rustdesk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
